# -*- coding: utf-8 -*-
"""analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l1XjzW1GmaoIJH4oltBC-Pkij-JR5x1o
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def load_and_prepare(filename):
    """
    Load CSV, group data by country, sum provinces,
    drop unnecessary columns, convert to numeric.
    """
    df = pd.read_csv(filename)
    df_grouped = df.groupby('Country/Region').sum().drop(columns=['Lat', 'Long'])
    df_grouped = df_grouped.apply(pd.to_numeric, errors='coerce').fillna(0)
    return df_grouped

def get_top_countries(confirmed_df, top_n=5):
    """
    Return the top N countries by total confirmed cases.
    """
    return confirmed_df.sum(axis=1).sort_values(ascending=False).head(top_n).index.tolist()

def transpose_and_clean(df):
    """
    Transpose the DataFrame and convert index to datetime.
    Remove invalid datetime rows.
    """
    df_t = df.T
    df_t.index = pd.to_datetime(df_t.index, errors='coerce')
    df_t = df_t[df_t.index.notna()]
    return df_t

def filter_pie_data(series, labels):
    """
    Filter out zero or negative values for pie charts.
    Returns filtered data and matching labels.
    """
    filtered = series[series > 0]
    filtered_labels = [labels[series.index.get_loc(i)] for i in filtered.index]
    return filtered, filtered_labels

# Load datasets
confirmed_country = load_and_prepare('time_series_covid19_confirmed_global.csv')
deaths_country = load_and_prepare('time_series_covid19_deaths_global.csv')
recovered_country = load_and_prepare('time_series_covid19_recovered_global.csv')

# Get top 5 countries by confirmed cases
top_countries = get_top_countries(confirmed_country, top_n=5)

# Prepare time series DataFrames
confirmed_ts = transpose_and_clean(confirmed_country)
deaths_ts = transpose_and_clean(deaths_country)
recovered_ts = transpose_and_clean(recovered_country)

# Latest date in the confirmed dataset
latest_date = confirmed_ts.index.max()

# Latest confirmed and deaths data (directly use latest_date)
confirmed_latest = confirmed_ts.loc[latest_date, top_countries].clip(lower=0).fillna(0)
deaths_latest = deaths_ts.loc[latest_date, top_countries].clip(lower=0).fillna(0)

# Find latest valid date for recovered with non-zero data in top countries
valid_dates = recovered_ts.index[(recovered_ts[top_countries].sum(axis=1) > 0)]
if len(valid_dates) > 0:
    latest_recovered_date = valid_dates.max()
    recovered_latest = recovered_ts.loc[latest_recovered_date, top_countries].clip(lower=0).fillna(0)
    print(f"Using recovered data from {latest_recovered_date.date()} instead of {latest_date.date()}")
else:
    latest_recovered_date = None
    recovered_latest = pd.Series(0, index=top_countries)
    print("No valid recovered data found for top countries. Recovered charts will be empty.")

# Prepare pie chart data
confirmed_data, confirmed_labels = filter_pie_data(confirmed_latest, top_countries)
deaths_data, deaths_labels = filter_pie_data(deaths_latest, top_countries)
recovered_data, recovered_labels = filter_pie_data(recovered_latest, top_countries)

# Plot all charts in 3 rows x 3 columns
fig, axes = plt.subplots(3, 3, figsize=(20, 15))

metrics = [
    ('Confirmed', confirmed_ts, confirmed_latest, confirmed_data, confirmed_labels, 'Oranges', latest_date),
    ('Deaths', deaths_ts, deaths_latest, deaths_data, deaths_labels, 'Reds', latest_date),
    ('Recovered', recovered_ts, recovered_latest, recovered_data, recovered_labels, 'Greens', latest_recovered_date),
]

for i, (name, ts_df, latest, pie_data, pie_labels, cmap, date_for_plot) in enumerate(metrics):
    # Line chart - cases over time
    ax = axes[i, 0]
    for country in top_countries:
        ax.plot(ts_df.index, ts_df[country], label=country)
    ax.set_title(f'{name} Cases Over Time')
    ax.set_xlabel('Date')
    ax.set_ylabel('Cases')
    ax.legend()

    # Bar chart - latest values by country
    ax = axes[i, 1]
    ax.bar(top_countries, latest, color=plt.cm.get_cmap(cmap)(0.6))
    if date_for_plot is not None:
        ax.set_title(f'Latest {name} Cases by Country\n({date_for_plot.date()})')
    else:
        ax.set_title(f'Latest {name} Cases by Country\n(No valid date)')
    ax.set_ylabel('Cases')
    ax.tick_params(axis='x', rotation=45)

    # Pie chart - distribution of latest values
    ax = axes[i, 2]
    if len(pie_data) > 0:
        ax.pie(
            pie_data,
            labels=pie_labels,
            autopct='%1.1f%%',
            colors=plt.cm.get_cmap(cmap)(np.linspace(0.4, 0.8, len(pie_data))),
            startangle=140
        )
    else:
        ax.text(0.5, 0.5, 'No data available', ha='center', va='center', fontsize=12)
    if date_for_plot is not None:
        ax.set_title(f'{name} Cases Distribution\n({date_for_plot.date()})')
    else:
        ax.set_title(f'{name} Cases Distribution\n(No valid date)')
    ax.axis('equal')  # Keaep pie chart circular

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def load(file):
    # Load data, group by country, drop Lat/Long, convert all columns to numeric
    df = pd.read_csv(file).groupby('Country/Region').sum().drop(['Lat', 'Long'], axis=1)
    df = df.apply(pd.to_numeric, errors='coerce').fillna(0)  # Convert to numeric and fill NaNs
    return df

# Load datasets
confirmed = load('time_series_covid19_confirmed_global.csv')
deaths = load('time_series_covid19_deaths_global.csv')
recovered = load('time_series_covid19_recovered_global.csv')

# Get top 5 countries by total confirmed cases
top = confirmed.sum(axis=1).nlargest(5).index

def prep_ts(df):
    # Transpose and parse dates, filter for top countries only
    df = df.T
    df.index = pd.to_datetime(df.index, errors='coerce')
    return df.dropna()[top]

# Prepare time series data
confirmed_ts = prep_ts(confirmed)
deaths_ts = prep_ts(deaths)
recovered_ts = prep_ts(recovered)

# Latest dates for confirmed and recovered
latest = confirmed_ts.index.max()
valid_recov_dates = recovered_ts.index[recovered_ts.sum(axis=1) > 0]
latest_recov = valid_recov_dates.max() if len(valid_recov_dates) else latest

# Latest data points
confirmed_latest = confirmed_ts.loc[latest].clip(lower=0)
deaths_latest = deaths_ts.loc[latest].clip(lower=0)
recovered_latest = recovered_ts.loc[latest_recov].clip(lower=0)

def pie_filter(s):
    # Filter out zero or negative values for pie chart
    filtered = s[s > 0]
    return filtered, filtered.index

# Plot all charts in a 3x3 grid
fig, axs = plt.subplots(3, 3, figsize=(18, 14))
metrics = [
    ('Confirmed', confirmed_ts, confirmed_latest, latest, 'Oranges'),
    ('Deaths', deaths_ts, deaths_latest, latest, 'Reds'),
    ('Recovered', recovered_ts, recovered_latest, latest_recov, 'Greens'),
]

for i, (name, ts_df, latest_data, date, cmap) in enumerate(metrics):
    # Line chart - cases over time
    for country in top:
        axs[i, 0].plot(ts_df.index, ts_df[country], label=country)
    axs[i, 0].set(title=f'{name} Cases Over Time', xlabel='Date', ylabel='Cases')
    axs[i, 0].legend()

    # Bar chart - latest data
    axs[i, 1].bar(top, latest_data, color=plt.cm.get_cmap(cmap)(0.6))
    axs[i, 1].set(title=f'Latest {name} Cases by Country\n({date.date()})', ylabel='Cases')
    axs[i, 1].tick_params(axis='x', rotation=45)

    # Pie chart - distribution
    pie_data, pie_labels = pie_filter(latest_data)
    if len(pie_data):
        axs[i, 2].pie(
            pie_data,
            labels=pie_labels,
            autopct='%1.1f%%',
            colors=plt.cm.get_cmap(cmap)(np.linspace(0.4, 0.8, len(pie_data))),
            startangle=140,
        )
    else:
        axs[i, 2].text(0.5, 0.5, 'No data', ha='center', va='center')
    axs[i, 2].set_title(f'{name} Cases Distribution\n({date.date()})')
    axs[i, 2].axis('equal')

plt.tight_layout()
plt.show()

"""# New Section"""